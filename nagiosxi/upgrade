#!/bin/bash -e

# Set up system variables
./init.sh
. ./xi-sys.cfg

# Subcomponents that may need to be recompiled, flags set so it's only done once per upgrade
# not yet fully implemented 
CORE_UPDATED=0
NDO_UPDATED=0
PNP_UPDATED=0
PLUGINS_UPDATED=0
NRPE_UPDATED=0
NSCA_UPDATED=0
NRDP_UPDATED=0
MRTG_UPDATED=0
UPDATE_SUDOERS=0
export INSTALL_PATH=`pwd`
if [ "x$INTERACTIVE" = "x" ]; then
    INTERACTIVE="True"
fi
if [ "x$FORCE_ADDON_UPGRADE" = "x" ]; then
    FORCE_ADDON_UPGRADE=0
fi

while [ -n "$1" ]; do
	case "$1" in
		-h | --help)
			usage
			exit 0
			;;
		-v | --version)
			sed -n '/full/ s/.*=//p' "${0%/*}/nagiosxi/basedir/var/xiversion"
			exit 0
			;;
		-n | --non-interactive)
			export INTERACTIVE="False"
			;;
		-o | --offline-install)
			export OFFLINE="TRUE"
			touch ./offline
			;;
		-f | --force-addon-update)
			# Force update of components, wizards, dashlets
			export FORCE_ADDON_UPGRADE=1
			;;
		*)
			echo "Unknown option:  $1" >&2
			usage >&2
			exit 1
	esac
	shift
done

if [ "$distro" != "Ubuntu" ] && [ "$distro" != "Debian" ]; then
    if rpm -q nagiosxi >/dev/null; then
        echo "RPM Install detected, switching to yum update"
        if [ "$INTERACTIVE" = "True" ]; then
            yum update nagiosxi
            exit $?
        else
            yum update nagiosxi -y
            exit $?
        fi
    fi
fi

# Restart the upgrade
if [ -t 1 ]; then
	$0 | tee -a "upgrade.log"
	exit 0
fi

# Copy xi-sys.cfg
cp xi-sys.cfg "$proddir/var/"
cp xi-sys.cfg ./nagiosxi/basedir/var/

# Install Sourceguardian extension
./install-sourceguardian-extension.sh
sh ./nagiosxi/basedir/scripts/manage_services.sh restart $httpd

# Verify server has needed prereqs
/usr/bin/php ./verify-prereqs.php

# Get existing version ID
oldversion=$(./get-version)

if [ "$oldversion" -eq 0 ]; then
	echo "ERROR: Could not determine currently installed version of Nagios XI!" >&2
	exit 1
fi

## ACTIVATION NOTICE #########################################

if [ "$oldversion" -lt 200 ]; then

	fmt -s -w $(tput cols) <<-EOF
		===================
		ACTIVATION REQUIRED
		===================
		This version of Nagios XI requires that you activate your license key.
		You can obtain an activation key for your license by visiting:

		         http://www.nagios.com/activate/

		WARNING: Certain features of Nagios XI will be disabled until you
		         successfully activate your key.

	EOF

	read -p "Are you sure you want to continue? [y/N] " res

	if [ "$res" = "y" -o "$res" = "Y" ]; then
		echo "Proceeding with upgrade..."
	else
		echo "Upgrade cancelled"
		exit 1
	fi

fi

echo "OLD VERSION: $oldversion"

####################### DEPENDENCY INSTALLER #################

if [ `command -v yum` ]; then

	# Remove repoforge/rpmforge repository because it's no longer around
	if [ "$oldversion" -le 530 ]; then
		yum remove -y rpmforge-release
		if [ `command -v yum-config-manager` ]; then
			yum-config-manager --disable rpmforge
		fi
	fi
    
    yum install -y automake autoconf php-mbstring nmap subversion
    yum install -y 'perl(Test::Simple)' 'perl(Class::Accessor)' perl-Params-Validate perl-Config-Tiny perl-Math-Calc-Units perl-Number-Format
    
    # Add php-pecl-ssh2 package for scheduled backup component
	yum install php-pecl-ssh2 -y || true
    
fi

####################### / DEPENDENCY INSTALLER #################

## VERSION-SPECIFIC FIXES ####################################


## 2009R1.1H AND EARLIER FIXES
# These only need to run if the version being upgraded is 1.1H or earlier
if [ "$oldversion" -le 112 ]; then

	# New PNP init script
	cp subcomponents/pnp/mods/npcd.init /etc/init.d/npcd
	service npcd restart

	# Nagios Core object definition fixes
	cp subcomponents/nagioscore/mods/cfg/fixes/2009r1.1i.cfg /usr/local/nagios/etc/import
	cp subcomponents/nagioscore/mods/cfg/fixes/nagiosadmin.cfg /usr/local/nagios/etc/import
	
	# Add nagiosxi user to Core CGI config file
	sed -i 's/^\(authorized_for_.*\)$/\1,nagiosxi/' /usr/local/nagios/etc/cgi.cfg

fi


## 2009R1.2B AND EARLIER FIXES
# These only need to run if the version being upgraded is 1.2A or earlier
if [ "$oldversion" -le 113 ]; then

	# Nagios Core object definition fixes
	cp subcomponents/nagioscore/mods/cfg/fixes/2009r1.2b.cfg /usr/local/nagios/etc/import

	# Daemon tools
	echo "Installing daemon tools..."
	rpm -i -p http://libslack.org/daemon/download/daemon-0.6.3-1.i386.rpm

	# Logrotate entry
	echo "Adding logrotate entries..."
	cp ./nagiosxi/logrotate.nagiosxi /etc/logrotate.d/nagiosxi
	# Force log rotation
	logrotate -f /etc/logrotate.conf

fi


## 2009R1.2C AND EARLIER FIXES
# These only need to run if the version being upgraded is 1.2C or earlier
if [ "$oldversion" -le 114 ]; then

	# Fix perms on Nagios etc directory
	chown $apacheuser:$nagiosgroup /usr/local/nagios/etc
	chmod g+s /usr/local/nagios/etc

fi


# 2009R1.4 FIXES (PATCHES R1.3G and EARLIER)
if [ "$oldversion" -le 125 ]; then
	
	# Fix perms on perfdata directory
	chmod g+w /usr/local/nagios/var/spool/perfdata

	# Make XI data processing engine directory
	mkdir /usr/local/nagios/var/spool/xidpe
	chown $nagiosuser:$nagiosgroup /usr/local/nagios/var/spool/xidpe

	# Change performance data processing commands
	#sed -i 's/service_perfdata_file_processing_command=process-service-perfdata-file-pnp-bulk/service_perfdata_file_processing_command=process-service-perfdata-file-bulk/g' /usr/local/nagios/etc/nagios.cfg
	#sed -i 's/host_perfdata_file_processing_command=process-host-perfdata-file-pnp-bulk/host_perfdata_file_processing_command=process-host-perfdata-file-bulk/g' /usr/local/nagios/etc/nagios.cfg

	# New nagios.cfg file (with perfdata fixes)
	cp -f /usr/local/nagios/etc/nagios.cfg /usr/local/nagios/etc/nagios.cfg.orig
	cp -f subcomponents/nagioscore/mods/cfg/nagios.cfg /usr/local/nagios/etc/

	# Nagios Core object definition fixes/changes
	cp subcomponents/nagioscore/mods/cfg/fixes/2009r1.4.cfg /usr/local/nagios/etc/import

fi


# 2011R1.1 (PATCHES EARLIER RELEASES)
if [ "$oldversion" -lt 201 ]; then

	# Disable logging of passive checks, external commands
	sed -i 's/log_passive_checks=1/log_passive_checks=0/g' /usr/local/nagios/etc/nagios.cfg
	sed -i 's/log_external_commands=1/log_external_commands=0/g' /usr/local/nagios/etc/nagios.cfg

fi


## 2011R1.4 AND EARLIER FIXES
if [ "$oldversion" -le 204 ]; then

	# Nagios Core object definition fixes
	cp subcomponents/nagioscore/mods/cfg/fixes/2011r1.4.cfg /usr/local/nagios/etc/import

fi
	

## 2011R1.5 FIXES (PATCHES EARLIER RELEASES)
if [ "$oldversion" -le 205 ]; then

	# Fix fubar'ed command definitions
	cp subcomponents/nagioscore/mods/cfg/fixes/2011r1.5.cfg /usr/local/nagios/etc/import

	# Fix fubar'ed permissions
	chown -R $nagiosuser:$nagiosgroup /usr/local/nagios/var
	chown -R $nagiosuser:$nagioscmdgroup /usr/local/nagios/var/rw

fi


## 2011R1.8 FIXES (PATCHES EARLIER RELEASES)
if [ "$oldversion" -le 208 ]; then
	
	# Set PNP template directory perms
	chown -R .$nagiosgroup /usr/local/nagios/share/pnp
	chmod g+ws /usr/local/nagios/share/pnp/templates
	chmod g+ws /usr/local/nagios/share/pnp/templates.dist

	# Reload apache to apply perms
	service $httpd reload

fi


## 2011R2.4 FIXES
if [ "$oldversion" -lt 214 ]; then

	# Create audit log database structure
	./init-auditlog
fi

## 2011R3.0 Updates
if [ "$oldversion" -lt 215 ]; then	
	
	# Update NSCA to 1.5.1
	if [ $NSCA_UPDATED -eq 0 ]; then
	(
		cd ./subcomponents/nsca
		./upgrade
		NSCA_UPDATED=1
	)
	fi		
	
fi 

############################2012###################################
## 2012 R1.0 
if [ "$oldversion" -lt 300 ]; then

	#update prereqs   ##Ajaxterm requires SSL be installed before running install script
	./install-2012-prereqs
	
	# Install Ajaxterm
	(
		cd ./subcomponents/ajaxterm
		./install	
	)

fi

if [ "$oldversion" -lt 304 ]; then
	##update nagiosql user table to allow user-defined locale
	(
		cd subcomponents/nagiosql
		./db_upgrades.php "$oldversion"
	)
	
	#Update ndomod to no longer store check data and timed event data
	sed -i 's/data_processing_options=-1/data_processing_options=67108669/g' /usr/local/nagios/etc/ndomod.cfg

fi

if [ "$oldversion" -lt 313 ]; then

	# Add font support for alternate languages
	yum install -y "@Japanese Support" "@Chinese Support" "@Korean Support" 
    
    # nagiosql sql injection vulnerability
    (
		cd subcomponents/nagiosql
        ./upgrade
	)
	
fi


############################2014###################################
## 2014 R1.0 
if [ "$oldversion" -lt 402 ]; then

    # Upgrade core to 4.0.5
	if [ $CORE_UPDATED -eq 0 ]; then
		# This change adds downtime macros the to default host/service event handlers
		cp subcomponents/nagioscore/mods/cfg/fixes/2014r1.0.cfg /usr/local/nagios/etc/import
	fi
	
	# Upgrade NRPE to latest
	if [ $NRPE_UPDATED -eq 0 ]; then
		(
			cd ./subcomponents/nrpe
			./upgrade
			NRPE_UPDATED=1
		)
	fi

	# Copy over new webroot.php with 2014 theme
	./Z-webroot
	
	service $httpd restart
	mkdir -p /store/backups/nagiosxi
	chown $nagiosuser:$nagiosgroup /store/backups/nagiosxi
	
fi

# Force update of components, wizards, dashlets, mrtg
if [ "$oldversion" -lt 403 -o $FORCE_ADDON_UPGRADE -eq 1 ]; then
	# Update wizards
	(
		cd ./subcomponents/xiwizards
		./install
	)

	# Update components
	(
		cd ./subcomponents/xicomponents
		./install
	)

	# Install dashlets
	(
		cd ./subcomponents/xidashlets
		./install
	)
	
	# Install mrtg 2.17.4
	if [ $MRTG_UPDATED -eq 0 ]; then
		(
			cd ./subcomponents/mrtg
			./upgrade
			MRTG_UPDATED=1
		)
	fi
fi

## 2014R1.1
if [ "$oldversion" -lt 404 ]; then

	# upgrade wkhtmltopdf if it's outdated
	(
		cd ./subcomponents/wkhtmlx
		./install
	)
	
	# new CCM updates require that mysqld be restarted just once to make sure date matches what is on the system
	if [ "$cfg__db_info__nagiosql__dbserver" = "localhost" ] || [ "$cfg__db_info__nagiosql__dbserver" = "127.0.0.1" ]; then
		sh ./nagiosxi/basedir/scripts/manage_services.sh restart $mysqld
	else
		extra_message=<<-EOF

		MANUAL MYSQL RESTART REQUIRED!!
		This upgrade requires a MySQL server restart. Please restart your offloaded MySQL server manually.
		
		EOF
	fi
fi

## 2014R1.2
if [ "$oldversion" -lt 405 ]; then
	
	# Upgrade PNP process_perfdata
	(
		cd ./subcomponents/pnp
		rm -f /usr/local/nagios/libexec/process_perfdata.pl
		cp mods/process_perfdata.pl /usr/local/nagios/libexec/
		chown "$nagiosuser:$nagiosgroup" /usr/local/nagios/libexec/process_perfdata.pl
	)
	
	# Change CHARSET in Nagiosql DB to support UTF-8 Chars (not tbl_info though)
	mysql -h $cfg__db_info__nagiosql__dbserver -u $cfg__db_info__nagiosql__user --password="$cfg__db_info__nagiosql__pwd" --database=$cfg__db_info__nagiosql__db -B -N -e "SHOW TABLES" | grep -v "tbl_info" | awk '{print "ALTER TABLE", $1, "CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;"}' | mysql  -h $cfg__db_info__nagiosql__dbserver -u $cfg__db_info__nagiosql__user --password="$cfg__db_info__nagiosql__pwd" --database=$cfg__db_info__nagiosql__db
	
fi

## 2014R2.0
if [ "$oldversion" -lt 409 ]; then
	
	# update to auto_rescheduling_window 
	sed -i 's/^auto_rescheduling_window=180/auto_rescheduling_window=45/g' /usr/local/nagios/etc/nagios.cfg
	
	# Install phantomjs - for Highcharts export server
	(
		cd /tmp
		arch=`uname -m`
		
		if [ "$arch" == "x86_64" ]; then
			package="phantomjs-1.9.8-linux-x86_64"
		else
			package="phantomjs-1.9.8-linux-i686"
		fi

		echo "Installing PhantomJS..."

		# Delete the old archive
		rm -rf phantomjs*

		# Download the file
		wget http://assets.nagios.com/downloads/nagiosxi/packages/$package.tar
		tar xf $package.tar
		
		# Move executables to proper location
		mkdir -p $proddir/html/includes/components/highcharts/exporting-server/temp
		cp $package/bin/phantomjs $proddir/html/includes/components/highcharts/exporting-server
		chown -R "$nagiosuser:$nagiosgroup" $proddir/html/includes/components/highcharts/exporting-server
		chmod 775 $proddir/html/includes/components/highcharts/exporting-server/temp
		
		# Clean up
		rm -rf phantomjs*
	)
    
    # Upgrade plugins to 2.0.3
	if [ $PLUGINS_UPDATED -eq 0 ]; then
		(
			cd ./subcomponents/nagiosplugins
			./upgrade
		)
		PLUGINS_UPDATED=1
	fi
fi

## 2014R2.1
if [ "$oldversion" -lt 410 ]; then
	# Upgrade PNP
	(
		cd ./subcomponents/pnp
		./upgrade
		PNP_UPDATED=1
	)

	# Fix the auto-backup scripts
    if [ -f /root/scripts/automysqlbackup ]; then
        sed -i 's/eval rm -fv "$BACKUPDIR\/weekly\/$DB_week.$REMW.*"/eval rm -fv "$BACKUPDIR\/weekly\/$DB\/${DB}_week.$REMW.*"/' /root/scripts/automysqlbackup
	fi
    if [ -f /root/scripts/autopostgresqlbackup ]; then
        sed -i 's/eval rm -fv "$BACKUPDIR\/weekly\/$DB\/week.$REMW.*"/eval rm -fv "$BACKUPDIR\/weekly\/$DB\/${DB}_week.$REMW.*"/' /root/scripts/autopostgresqlbackup
    fi

	# Modify NDOutils database to make sure upgrades have been completed
	mysql -h $cfg__db_info__ndoutils__dbserver -u $cfg__db_info__ndoutils__user --password="$cfg__db_info__ndoutils__pwd" --database=$cfg__db_info__ndoutils__db < nagiosxi/verify_upgraded_ndo.sql
    
    # Modify MRTG to use Forks
    if ! grep -q Forks "/etc/mrtg/mrtg.cfg"; then
        echo "Forks: 4" >> /etc/mrtg/mrtg.cfg
    fi

fi

## 2014R2.4
if [ "$oldversion" -lt 413 ]; then
	
    # Backup old init script
    # Find a suitable filename
    backupfile=/tmp/nagios.init.orig
    while [ -f "$backupfile" ]; do
        backupfile=$(echo "$backupfile" | awk -F. 'BEGIN{OFS="."} {print $1, $2, $3, $4+1}')
    done

    echo "Saving old init script to $backupfile..."
    cat /etc/init.d/nagios > "$backupfile"
    # New init file
    cp -r subcomponents/nagioscore/mods/nagios.init /etc/init.d/nagios
	
fi

## 2014R2.6
if [ "$oldversion" -lt 415 ]; then
    
    # install new version of the mysql_check_health
    echo "Installing new version mysql_check_health (version 2.1.8.2)"
    #do the check_mysql_health magic
    (
        cd subcomponents/extraplugins/check_mysql_health-2.1.8.2
        ./configure # have to configure to make makefile to make clean. arg.
        make clean
        ./configure
        make
    )

    cp -r subcomponents/extraplugins/check_mysql_health-2.1.8.2/plugins-scripts/check_mysql_health /usr/local/nagios/libexec/
fi

## 2014R2.7
if [ "$oldversion" -lt 416 ]; then
    
    # Add Our Repository to CentOS/RHEL 5
    if [ "$distro" == "CentOS" ] || [ "$distro" == "RedHatEnterpriseServer" ]; then
        if ! rpm -q nagios-repo &>/dev/null; then
            echo "Enabling Nagios repo..."
            PKG="packages/nagios-repo-$ver-2.el$ver.noarch.rpm"
            echo "Installing Nagios Repo PKG: $PKG"
            rpm -Uvh "$PKG"
            rm "$PKG"
            unset PKG
        fi
    fi
    
    # upgrade NRDP 1.3.1 and apply patches
	if [ $NRDP_UPDATED -eq 0 ]; then
		(
			cd ./subcomponents/nrdp
			./upgrade
			NRDP_UPDATED=1
		)
	fi
fi

# Force update of components, wizards, dashlets
if [ "$oldversion" -lt 501 ]; then
	if [ "$INTERACTIVE" = "True" ]; then
	fmt -s -w $(tput cols) <<-EOF
		===================
		XI 5 Updates
		===================
		NOTICE: This upgrade script will update all XI components, wizards, and dashlets
		to the latest available versions. Before running this upgrade the currently 
		installed versions will be backed up to the /tmp directory. 

	EOF

	read -p "Are you sure you want to continue? [y/N] " res
	
	else
		res="Y"
	fi
	
	if [ "$res" = "y" -o "$res" = "Y" ]; then
		echo "Proceeding with upgrade..."
	else
		echo "Upgrade cancelled"
		exit 1
	fi
    
    # upgrade Core 4.1.1
	if [ $CORE_UPDATED -eq 0 ]; then
		(
			cd ./subcomponents/nagioscore
			./upgrade
			CORE_UPDATED=1
		)
	fi
    
    # Patch ndoutils for message queue
	if [ $NDO_UPDATED -eq 0 ]; then
        (
            cd ./subcomponents/ndoutils
            ./upgrade
            NDO_UPDATED=1
        )
	fi	

	# Fix the active_directory component from loading adLDAP library
    if [ -f $proddir/html/includes/components/active_directory/active_directory.inc.php ]; then
        sed -i '/\/adLDAP\/adLDAP.php/d' $proddir/html/includes/components/active_directory/active_directory.inc.php
    fi
    
	# Update wizards
	(
		cd ./subcomponents/xiwizards
		./install
	)

	# Update components
	(
		cd ./subcomponents/xicomponents
		./install
	)

	# Install dashlets
	(
		cd ./subcomponents/xidashlets
		./install
	)
    
    # Re-install nagiosmobile
	(
		cd ./subcomponents/nagiosmobile
		./install
	)
    
    # Update nagios init script to not exit 0 if process isn't running
    sed -i 's/echo "nagios is not running"/echo "nagios is not running";exit 3/g' /etc/init.d/nagios
    
    # Make NPCD status more robust
    sed -i 's/ps -p $PID_NUMBER > /ps -p $PID_NUMBER | grep npcd > /g' /etc/init.d/npcd

    # Add details to audit log and reset themes
    if [ "$cfg__db_info__nagiosxi__dbtype" == "pgsql" ]; then
        echo "ALTER TABLE xi_auditlog ADD COLUMN details text;" | psql $cfg__db_info__nagiosxi__db $cfg__db_info__nagiosxi__user
        echo "DELETE FROM xi_usermeta WHERE keyname='theme';" | psql $cfg__db_info__nagiosxi__db $cfg__db_info__nagiosxi__user
        echo "DELETE FROM xi_options WHERE name='theme';" | psql $cfg__db_info__nagiosxi__db $cfg__db_info__nagiosxi__user
    fi
    
    # Upgrade extra plugins (specifically check_rrdtraf)
    (
        cd ./subcomponents/extraplugins
        ./upgrade
    )
    
    # Fix mrtg cron not being created 
    if [ ! -f /etc/cron.d/mrtg ]; then
        echo "*/5 * * * * root LANG=C LC_ALL=C /usr/bin/mrtg /etc/mrtg/mrtg.cfg --lock-file /var/lock/mrtg/mrtg_l --confcache-file /var/lib/mrtg/mrtg.ok" >/etc/cron.d/mrtg
    fi

    # Add API apache conf file
    cat nagiosxi/httpd.api.conf >> /etc/httpd/conf.d/nagiosxi.conf
    
    # fix ndo2db start order
    sed -i 's/# chkconfig: 345 99 01/# chkconfig: 345 97 01/g' /etc/init.d/ndo2db
    chkconfig ndo2db on

fi

# Version < 5.2.0
if [ "$oldversion" -lt 511 ]; then

	# Verify that upgrades directory exists
	if [ ! -d /usr/local/nagiosxi/var/upgrades ]; then
		mkdir -p /usr/local/nagiosxi/var/upgrades
		chown $apacheuser:$nagiosgroup /usr/local/nagiosxi/var/upgrades
		chmod 754 /usr/local/nagiosxi/var/upgrades
		chmod +x /usr/local/nagiosxi/var/upgrades
	fi

fi

# Version < 5.2.1
if [ "$oldversion" -lt 512 ]; then

	# Upgrade extra plugins (specifically adding Nagios::Monitoring::Plugin)
    (
        cd ./subcomponents/extraplugins
        ./upgrade
    )
    
    # reinstall webinject to make sure we have proper permissions
    (
        cd ./subcomponents/webinject
        ./install
    )
    
    # modify ndo2db init
    sed -i 's/Ndo2dbPID=.*/Ndo2dbPID=\`head -n 1 $Ndo2dbRunFile 2> \/dev\/null\`/g' /etc/init.d/ndo2db

fi

# Version < 5.2.2
if [ "$oldversion" -lt 513 ]; then

    # upgrade NRDP to apply new send_nrdp.sh
	if [ $NRDP_UPDATED -eq 0 ]; then
		(
			cd ./subcomponents/nrdp
			./upgrade
			NRDP_UPDATED=1
		)
	fi

fi

# Version < 5.2.3
if [ "$oldversion" -lt 514 ]; then

	# Fix perms on autodiscovery
	chmod 776 $proddir/html/includes/components/autodiscovery/jobs

	# Install autodiscovery wizard if not installed
	if [ ! -d "$proddir/html/includes/configwizards/autodiscovery" ]; then
		"$proddir/tools/install_configwizard.php" --file="subcomponents/xiwizards/wizards/autodiscovery.zip" --restart=false --refresh=1
	fi

	# Install rss dashlet wizard if not installed
	if [ ! -d "$proddir/html/includes/dashlets/rss_dashlet" ]; then
		"$proddir/tools/install_dashlet.php" --file="subcomponents/xidashlets/dashlets/rss_dashlet.zip" --refresh=1
	fi

	# Install escalation wizard if not installed
	if [ ! -d "$proddir/html/includes/components/escalationwizard" ]; then
		"$proddir/tools/install_component.php" --file="subcomponents/xicomponents/components/escalationwizard.zip" --refresh=1
	fi
    
    # upgrade NRDP to apply new send_nrdp.sh
	if [ $NRDP_UPDATED -eq 0 ]; then
		(
			cd ./subcomponents/nrdp
			./upgrade
			NRDP_UPDATED=1
		)
	fi

	# Update sudoers just in case (we stopped updating every upgrade in 5.3.0)
	UPDATE_SUDOERS=1

fi

# Version 5.2.8
if [ "$oldversion" -lt 519 ]; then

    # Fix nagvis for RHEL/Cent7 tps#8313
	if [ $ver -eq 7 ] && [ -f /usr/local/nagvis/share/server/core/classes/WuiViewEditMainCfg.php ]; then
		sed -i 's/.*\$arr\[\$propname\]\['\''default'\''\].*/if (\!is_array(\$prop\['\''default'\''\])) { & } /' /usr/local/nagvis/share/server/core/classes/WuiViewEditMainCfg.php
	fi

fi

# Version 5.2.9
if [ "$oldversion" -lt 520 ]; then

	# Upgrade extra plugins (for properly updating check_snmp_win to latest version)
	# Also for the SNMP->VERSION fix in tps#8365
    (
        cd ./subcomponents/extraplugins
        ./upgrade
    )

fi

# Version < 5.3.0
if [ "$oldversion" -lt 530 ]; then

	if [ "$INTERACTIVE" = "True" ]; then
		fmt -s -w $(tput cols) <<-EOF
		===================
		XI 5.3.0 Updates
		===================
		NOTICE: This upgrade script will update ALL XI components, wizards, and dashlets
		to the latest available versions. Before running this upgrade the currently 
		installed versions will be backed up to the /tmp directory. 

		EOF

		read -p "Are you sure you want to continue? [y/N] " res
	
	else
		res="Y"
	fi
	
	if [ "$res" = "y" -o "$res" = "Y" ]; then
		echo "Proceeding with upgrade..."
	else
		echo "Upgrade cancelled"
		exit 1
	fi

	# Update wizards
	(
		cd ./subcomponents/xiwizards
		./install
	)

	# Update components
	(
		cd ./subcomponents/xicomponents
		./install
	)

	# Install dashlets
	(
		cd ./subcomponents/xidashlets
		./install
	)

	# Do not re-run the MySQL upgrades if they have already been applied
	if [ ! -f 'mysql.530.updated' ]; then

		if [ "$cfg__db_info__nagiosxi__dbserver" == "" ]; then
			cfg__db_info__nagiosxi__dbserver="localhost";
		fi

		if [ "$cfg__db_info__nagiosql__dbserver" == "" ]; then
			cfg__db_info__nagiosql__dbserver="localhost";
		fi

	    if [ "$cfg__db_info__nagiosxi__dbtype" == "pgsql" ]; then
	    	psql $cfg__db_info__nagiosxi__db $cfg__db_info__nagiosxi__user -f nagiosxi/nagiosxi-db/mods/pgsql/schema_01.sql
	    else
	    	mysql -h $cfg__db_info__nagiosxi__dbserver -u $cfg__db_info__nagiosxi__user --password="$cfg__db_info__nagiosxi__pwd" --database=$cfg__db_info__nagiosxi__db < nagiosxi/nagiosxi-db/mods/mysql/schema_01.sql
	    fi

	    # Update nagiosql database structure (session locking / negation)
	    mysql -h $cfg__db_info__nagiosql__dbserver -u $cfg__db_info__nagiosql__user --password="$cfg__db_info__nagiosql__pwd" --database=$cfg__db_info__nagiosql__db < subcomponents/nagiosql/mods/schema_01.sql
	    touch 'mysql.530.updated'

	fi

    # Upgrade mrtg configurations
    echo -e "\nEnableSNMPv3: yes\n" >> /etc/mrtg/mrtg.cfg

    # Increase open file limits for switch wizard changes
    ./subcomponents/mrtg/increase_open_file_limits.sh

    # if we're on cent/rhel, and for some reason we have mrtg installed (from an old dependency)
    # we need to remove it and recompile our version
    if [[ $dist == el* ]]; then
    	if yum list installed mrtg &>/dev/null; then

    		# this all fails if there isn't a valid mrtg.cfg in /etc/mrtg
    		# so we need to back it up before removing and then replace it
    		echo "Removing repository MRTG and recompiling"
    		cp /etc/mrtg/mrtg.cfg /etc/mrtg/mrtg.cfg.bak
    		if yum remove mrtg -y; then
				(
					mv /etc/mrtg/mrtg.cfg.bak /etc/mrtg/mrtg.cfg
					cd ./subcomponents/mrtg
					./upgrade
				)
			fi
    	fi
    fi

    # Update logrotate files
	cp ./nagiosxi/logrotate.nagiosxi /etc/logrotate.d/nagiosxi
	sed -i "s|APACHEUSER|$apacheuser|;s|NAGIOSGROUP|$nagiosgroup|;s|PRODDIR|$proddir|" /etc/logrotate.d/nagiosxi

	# make sure snmptt gets restarted during nagios start/restart [tps#9234]
    # Backup old init script
    # Find a suitable filename
    backupfile=/tmp/nagios.init.orig
    while [ -f "$backupfile" ]; do
        backupfile=$(echo "$backupfile" | awk -F. 'BEGIN{OFS="."} {print $1, $2, $3, $4+1}')
    done

    echo "Saving old init script to $backupfile..."
    cat /etc/init.d/nagios > "$backupfile"
    # New init file
    cp -r subcomponents/nagioscore/mods/nagios.init /etc/init.d/nagios

	# update config.inc.php with changes for cfg_only flag
	sed -i 's/require_once.*/if (!defined('\''CFG_ONLY'\'')) { & }/' $proddir/html/config.inc.php

	# Upgrade PNP process_perfdata
	(
		cd ./subcomponents/pnp
		rm -f /usr/local/nagios/libexec/process_perfdata.pl
		cp mods/process_perfdata.pl /usr/local/nagios/libexec/
		chown "$nagiosuser:$nagiosgroup" /usr/local/nagios/libexec/process_perfdata.pl
	)
fi

# 5.3.2
if [ "$oldversion" -lt 532 ]; then

	# update the mrtg cron to change lock directory
	# for whatever reason, the lock directory became volatile on cent7
	if [ -f /etc/cron.d/mrtg ]; then
		sed -i 's|/var/lock/mrtg|/var/lib/mrtg|' /etc/cron.d/mrtg
	fi
fi


##########################################################################
## COMMON FIXES
##
## These run during ever upgrade after version-specific upgrade procedures
##########################################################################


# Update old crontab entries
./uninstall-crontab-nagios
./uninstall-crontab-root
install -m 644 nagiosxi/nagiosxi.cron.d /etc/cron.d/nagiosxi 

# Fix/update sudoers
if [ $UPDATE_SUDOERS -eq 1 ]; then
	./install-sudoers
fi
	
# Fix perms on Backups (make backup directory if it doesn't exist)
mkdir -p /store/backups/nagiosxi
chown $nagiosuser:$nagiosgroup -R /store/backups/nagiosxi

# Fix perms on Nagios etc directory
chown $apacheuser:$nagiosgroup /usr/local/nagios/etc
chmod g+s /usr/local/nagios/etc

# Install updated NagiosXI PHP files, scripts, etc. to /usr/local/nagiosxi
# This also makes the latest config perm reset utility
./install-html

# Fix permissions on restore config file
chmod ug+x "$proddir/scripts/nom_restore_nagioscore_checkpoint_specific.sh"

# Update databases (indexes, etc)
(
	cd "$proddir/scripts"
	/usr/bin/php patch_ndoutils.php
)

# Fix sequences in Postgres database
if [ "$cfg__db_info__nagiosxi__dbtype" == "pgsql" ]; then
    echo "Updating sequences..."
    ./nagiosxi/basedir/tools/fix_postgres_sequences.sh
fi

# Install latest PNP templates
./install-pnptemplates

# Install latest init script
echo "Updating init script..."
cp ./nagiosxi/nagiosxi.init /etc/init.d/nagiosxi

# Make sure large install tweaks are enabled
echo "Enabling large install tweaks..."
sed -i 's/use_large_installation_tweaks=0/use_large_installation_tweaks=1/g' /usr/local/nagios/etc/nagios.cfg

# Fix permissions on config files
echo "Fixing config file permissions..."
chown $apacheuser:$nagiosgroup /usr/local/nagios/etc/*.cfg
chown $apacheuser:$nagiosgroup /usr/local/nagios/etc/hosts/*.cfg
chown $apacheuser:$nagiosgroup /usr/local/nagios/etc/services/*.cfg
chown -R "$apacheuser:$apachegroup" /var/www/html/nagiosql/config

# Set permissions on htpasswd file
echo "Fixing htpasswd permissions..."
chown -R $nagiosuser:$apachegroup "$proddir/etc/htpasswd.users"

# Enforce proper group membership
echo "Checking group memberships..."
if [ "$dist" = "suse11" ]; then
        eval "$usermodbin" -A "$nagioscmdgroup" "$nagiosuser"
        eval "$usermodbin" -A "$nagioscmdgroup" "$apacheuser"
        eval "$usermodbin" -A "$nagiosgroup" "$nagiosuser"
        eval "$usermodbin" -A "$nagiosgroup" "$apacheuser"
else
        eval "$usermodbin" -a -G "$nagioscmdgroup" "$nagiosuser"
        eval "$usermodbin" -a -G "$nagioscmdgroup" "$apacheuser"
        eval "$usermodbin" -a -G "$nagiosgroup" "$nagiosuser"
        eval "$usermodbin" -a -G "$nagiosgroup" "$apacheuser"
fi

# Install new Nagios Core templates (restarts Nagios Core)
./install-templates

# Fix for php-mcrypt bug
if [ -f /etc/php.d/mcrypt.ini ]; then
	echo "Fixing php-mcrypt bug..."
    perl -p -i -e "s|module.so|mcrypt.so|g" /etc/php.d/mcrypt.ini
fi

# Restart apache so it recognizes the new permissions
$proddir/scripts/manage_services.sh start $httpd
    
# Set SNMP MIB directory perms since new versions of net-snmp-libs changes this
chown -R .$nagiosgroup "$mibsdir"
chmod g+ws "$mibsdir"

# Install the new LDAP/AD & Auto-Discovery Components for XI 5
if [ "$oldversion" -lt 501 ]; then
	sh $proddir/html/includes/components/ldap_ad_integration/install.sh
	sh $proddir/html/includes/components/nrdsconfigmanager/install.sh
fi

# Fix permissions on plugin directory
chown $apacheuser:$nagiosgroup -R /usr/local/nagios/libexec
chmod ug+rwx -R /usr/local/nagios/libexec
chmod g+s /usr/local/nagios/libexec
chown root:$nagiosgroup /usr/local/nagios/libexec/check_dhcp
chown root:$nagiosgroup /usr/local/nagios/libexec/check_icmp
chmod u+s /usr/local/nagios/libexec/check_dhcp
chmod u+s /usr/local/nagios/libexec/check_icmp

# Fix mrtg data permissions
chown "$apacheuser:$nagiosgroup" /var/lib/mrtg -R
chmod 775 /var/lib/mrtg -R

# Make sure to run the PHP upgrade
php "$proddir/html/upgrade.php"

if [ $ver -eq 7 ]; then
	ip=$(ip addr | grep global | grep -m 1 'inet' | awk '/inet[^6]/{print substr($2,0)}' | sed 's|/.*||')
else
	ip=$(ifconfig | egrep -1 eth[0-9] | grep -m 1 'inet' | awk '/inet[^6]/{print substr($2,6)}')
fi

if [ "$ip" == "" ];then
    ip="<HOSTNAME>"
fi

cat <<-EOF

	Nagios XI Upgrade Complete!
	---------------------------
	$extra_message

	You can access the Nagios XI web interface by visiting:
	    http://$ip/nagiosxi/
	
EOF

