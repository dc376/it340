#!/bin/bash -e

. ./xi-sys.cfg

##########################################
# INITIALIZE MYSQL
##########################################

# See if user already initialized MySQL
if [ -f installed.mysql ]; then
    echo "MySQL already initialized - skipping."
    exit 0
fi

if [ $ver -eq 7 ] || [ "$distro" == "Ubuntu" ] || [ "$distro" == "Debian" ]; then
    my_verify="/usr/bin/mysql"
else
    my_verify="/etc/init.d/$mysqld"
fi

# Check that mysql is installed
if [ ! -x $my_verify ]; then
    echo "ERROR: MySQL not installed - exiting." >&2
    exit 1
fi
echo "MySQL installed OK - continuing..."

echo "Starting MySQL..."
if ! service "$mysqld" restart; then
    echo "ERROR: MySQL failed to start - exiting." >&2
    exit 1
fi

echo "Initializing MySQL..."

# Test for pre-saved password (from ./fullinstall script)
if mysqlshow -u root -p"$mysqlpass" &>/dev/null; then
    echo "Saved password '$mysqlpass' worked..."
# Test for null MySQL root password
elif mysqlshow -u root &>/dev/null; then
    # Set the password to "nagiosxi"
    mysqlpass=nagiosxi  
    mysqladmin -u root password "$mysqlpass"
    echo "MySQL root password is now set to: $mysqlpass"
else
    for i in 1 2 3; do
        if [ "$INTERACTIVE" = "True" ]; then
            # Ask for the password
            echo "Enter the MySQL root password to continue..."
            read -p "MySQL Root Password: " pass
        fi

        # Test the password
        if mysqlshow -u root -p"$pass" &>/dev/null; then
            echo "Password validated."
            mysqlpass="$pass"
            break
        else
            echo "Password failed." >&2
            [ $i -eq 3 ] && exit 1
        fi
    done
fi

# we only automatically tune mysql if we just installed it
# see scripts/mysql_tune.sh
if [ "$TUNE_MYSQL" = "True" ]; then

    mycnf="/etc/my.cnf"
    if [ "$distro" == "Ubuntu" ] || [ "$distro" == "Debian" ]; then
        mycnf="/etc/mysql/my.cnf"
    fi

    # backup the cnf file first
    mycnfbak="$mycnf.bak"
    mycnfnew="$mycnf.new"
    cp $mycnf $mycnfbak

    if [ -f $mycnf ]; then

        # table_open_cache doesn't work on el5
        if [ "$dist" == "el5" ]; then
            sed -i 's/\[mysqld\]/\[mysqld\]\nquery_cache_size=16M\nquery_cache_limit=4M\ntmp_table_size=64M\nmax_heap_table_size=64M\nkey_buffer_size=32M\n/' $mycnf            
        else
            sed -i 's/\[mysqld\]/\[mysqld\]\nquery_cache_size=16M\nquery_cache_limit=4M\ntmp_table_size=64M\nmax_heap_table_size=64M\nkey_buffer_size=32M\ntable_open_cache=32\n/' $mycnf
        fi

        # if mysql doesn't restart, then we need to revert our changes
        if ! service "$mysqld" restart; then

            # keep a copy of the mycnf that failed for support
            cp $mycnf $mycnfnew
            cp $mycnfbak $mycnf

            # if it fails again we're out
            if ! server "$mysqld" restart; then
                echo "ERROR: MySQL failed to start - exiting." >&2
                exit 1
            fi
        fi
    fi
fi

# Update xi-sys.cfg with MySQL password for later use by subcomponent install
if ! ./xivar mysqlpass "$mysqlpass"; then
    echo "ERROR: Failed to update xi-sys.cfg with MySQL password - exiting." >&2
    exit 1
fi

# Update automysqlbackup script
if ! sed -i -e "s/PASSWORD=/PASSWORD=$mysqlpass/g" nagiosxi/automysqlbackup; then
    echo "ERROR: Failed to update automysqlbackup with MySQL password - exiting." >&2
    exit 1
fi

echo "MySQL initialized OK"
touch installed.mysql

